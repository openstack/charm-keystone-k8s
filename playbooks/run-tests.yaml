- hosts: all
  tasks:
# Start Microk8s setup
    - name: snapd is installed
      apt:
        name: snapd
      become: true

    - name: microk8s is installed
      snap:
        name: microk8s
        classic: true
      become: true

    - name: current user is in microk8s group
      user:
        name: "{{ ansible_user }}"
        groups: microk8s
        append: true
      become: true

    - name: reset ssh connection to apply permissions from new group
      meta: reset_connection

    - name: microk8s is started
      command:
        cmd: microk8s start

    - name: microk8s is running and ready
      command:
        cmd: microk8s status --wait-ready
      register: res
      failed_when: '"is running" not in res.stdout'

    - name: microk8s dns addon is enabled
      command:
        cmd: microk8s enable dns
      register: res
      changed_when: '"already enabled" not in res.stdout'

    - name: microk8s hostpath storage addon is enabled
      command:
        cmd: microk8s enable hostpath-storage
      register: res
      changed_when: '"already enabled" not in res.stdout'

    - name: microk8s metallb addon is enabled
      command:
        # ip range is an arbitrary choice; may need to be changed later
        cmd: microk8s enable metallb:10.170.0.1-10.170.0.100
      register: res
      changed_when: '"already enabled" not in res.stdout'

    - name: microk8s addons are ready
      command:
        cmd: microk8s status --format short
      register: res
      retries: 18
      delay: 10  # 18 * 10 = 3 minutes
      until: >
        "core/dns: enabled" in res.stdout and
        "core/hostpath-storage: enabled" in res.stdout and
        "core/metallb: enabled" in res.stdout
      changed_when: res.attempts > 1

    - name: juju is installed
      snap:
        name: juju
        classic: true
      become: true

    - name: juju is bootstrapped on microk8s
      command:
        cmd: juju bootstrap microk8s microk8s
      register: res
      changed_when: '"already exists" not in res.stderr'
      failed_when: '"ERROR" in res.stderr and "already exists" not in res.stderr'

    - name: current juju controller is microk8s
      command:
        cmd: juju switch microk8s
      register: res
      changed_when: '"no change" not in res.stderr'
# End Microk8s setup
# Start Run functional tests

    - name: test runner packages are installed
      apt:
        name:
          - tox
          - jq
          - gzip
      become: true

    - name: built charm is present locally (artefact from previous job)
      include_role:
        name: download-artifact
      vars:
        download_artifact_api: "https://zuul.opendev.org/api/tenant/{{ zuul.tenant }}"
        download_artifact_type: charm
        download_artifact_pipeline: check
        download_artifact_job: build-charm
        download_artifact_directory: "{{ zuul.project.src_dir }}"

    - name: Gunzip built charm
      command:
        cmd: gunzip {{ charm_build_name }}.charm.gz
        chdir: "{{ zuul.project.src_dir }}"

    - name: run smoke tests
      command:
        cmd: tox -e func-smoke
        chdir: "{{ zuul.project.src_dir }}"
# End Run functional tests
# Start Post run job

    - name: debug output for debugging the functional test
      shell: |
        set -x
        MODEL="$(juju models --format=json | jq -r '.models[]["short-name"]' | grep '^zaza-')"
        juju switch $MODEL
        juju status
        juju debug-log --replay
        exit 0
# End Post run job
